"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7283],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=c(n),u=r,f=p["".concat(l,".").concat(u)]||p[u]||m[u]||s;return n?a.createElement(f,o(o({ref:t},d),{},{components:n})):a.createElement(f,o({ref:t},d))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:r,o[1]=i;for(var c=2;c<s;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},10468:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const s={title:"Wire up ICS-29 Fees to the React App",sidebar_label:"Wire up ICS-29 Fees to the React App",sidebar_position:6,slug:"/fee/fee-react"},o="Wire up ICS-29 Fee to the React app",i={unversionedId:"fee/wire-fee-react",id:"fee/wire-fee-react",title:"Wire up ICS-29 Fees to the React App",description:"Our goal is to create a React component that will allow users to select their ICS-29 fee amount and pay it. The final component will look like this:",source:"@site/tutorials/01-fee/06-wire-fee-react.md",sourceDirName:"01-fee",slug:"/fee/fee-react",permalink:"/tutorials/fee/fee-react",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Wire up ICS-29 Fees to the React App",sidebar_label:"Wire up ICS-29 Fees to the React App",sidebar_position:6,slug:"/fee/fee-react"},sidebar:"defaultSidebar",previous:{title:"Scaffold a React App",permalink:"/tutorials/fee/scaffold-react"},next:{title:"Testing the React App",permalink:"/tutorials/fee/test-react"}},l={},c=[{value:"1. Create the State for ICS-29 Fee",id:"1-create-the-state-for-ics-29-fee",level:2},{value:"2. Add the ICS-29 Fee UI",id:"2-add-the-ics-29-fee-ui",level:2},{value:"3. Add the ICS-29 Fee to the transaction",id:"3-add-the-ics-29-fee-to-the-transaction",level:2}],d={toc:c},p="wrapper";function m(e){let{components:t,...s}=e;return(0,r.kt)(p,(0,a.Z)({},d,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"wire-up-ics-29-fee-to-the-react-app"},"Wire up ICS-29 Fee to the React app"),(0,r.kt)("p",null,"Our goal is to create a React component that will allow users to select their ICS-29 fee amount and pay it. The final component will look like this:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"ICS-29 Fee UI",src:n(55690).Z,width:"3840",height:"1950"})),(0,r.kt)("h2",{id:"1-create-the-state-for-ics-29-fee"},"1. Create the State for ICS-29 Fee"),(0,r.kt)("p",null,"We will do all our modifications in the ",(0,r.kt)("inlineCode",{parentName:"p"},"src/components/IgntSend.tsx")," file. First, we need to create a state for the fee amount. Add the following line to the ",(0,r.kt)("inlineCode",{parentName:"p"},"IgntSend")," component:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/components/IgntSend.tsx"',title:'"src/components/IgntSend.tsx"'},"interface TxData {\n  receiver: string;\n  ch: string;\n  amounts: Array<Amount>;\n  memo: string;\n  fees: Array<Amount>;\n  // plus-diff-line\n+ relayerFee: Array<Amount>;\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/components/IgntSend.tsx"',title:'"src/components/IgntSend.tsx"'},'const initialState: State = {\n  tx: {\n    receiver: "",\n    ch: "",\n    amounts: [],\n    memo: "",\n    fees: [],\n    // plus-diff-line\n+   relayerFee: [],\n  },\n  currentUIState: UI_STATE.SEND,\n  advancedOpen: false,\n};\n')),(0,r.kt)("h2",{id:"2-add-the-ics-29-fee-ui"},"2. Add the ICS-29 Fee UI"),(0,r.kt)("p",null,"Next, we need to add a functional UI which updates the fee amount in the state. Add the following code to the ",(0,r.kt)("inlineCode",{parentName:"p"},"IgntSend")," component:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/components/IgntSend.tsx"',title:'"src/components/IgntSend.tsx"'},"  const handleTxFeesUpdate = (selected: Amount[]) => {\n    setState((oldState) => {\n      const tx = oldState.tx;\n      tx.fees = selected;\n      return { ...oldState, tx };\n    });\n  };\n  // plus-diff-start\n+ const handleTxRelayerFeesUpdate = (selected: Amount[]) => {\n+   setState((oldState) => {\n+     const tx = oldState.tx;\n+     tx.relayerFee = selected;\n+     return { ...oldState, tx };\n+   });\n+ };\n  // plus-diff-end\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/IgntSend.tsx"',title:'"src/components/IgntSend.tsx"'},'            <div className="text-xs text-gray-600">Channel</div>\n\n            <div className="input-wrapper">\n              <input\n                className="mt-1 py-2 px-4 h-12 bg-gray-100 border-xs text-base leading-tight w-full rounded-xl outline-0"\n                placeholder="Enter a channel"\n                onChange={(evt) => {\n                  setState((oldState) => {\n                    const tx = oldState.tx;\n                    tx.ch = evt.target.value;\n                    return { ...oldState, tx };\n                  });\n                }}\n              />\n            </div>\n            // plus-diff-start\n+ \n+           <div className="text-xs pb-2 mt-8">ICS-29 Relayer Fees</div>\n+ \n+           <IgntAmountSelect\n+             className="token-selector"\n+             selected={state.tx.relayerFee}\n+             balances={balances.assets as Amount[]}\n+             update={handleTxRelayerFeesUpdate}\n+           />\n            // plus-diff-end\n')),(0,r.kt)("p",null,"At this point, you should be able to see the ICS-29 fee UI in the app. See the diff up to this point ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/srdtrk/cosmoverse2023-ibc-fee-demo/commit/a93acb8e1b4194402a45506c5c3105b4dc03ad58"},"here"),". However, the fee amount is not being used in the transaction. Let's fix that."),(0,r.kt)("h2",{id:"3-add-the-ics-29-fee-to-the-transaction"},"3. Add the ICS-29 Fee to the transaction"),(0,r.kt)("p",null,"Since we will perform a ",(0,r.kt)("inlineCode",{parentName:"p"},"MultiMsgTx")," and follow the ",(0,r.kt)("a",{parentName:"p",href:"https://ibc.cosmos.network/v7/middleware/ics29-fee/msgs#escrowing-fees"},"immediate incentivization flow"),", we must import the required msg constructors from the ",(0,r.kt)("inlineCode",{parentName:"p"},"ts-client"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/components/IgntSend.tsx"',title:'"src/components/IgntSend.tsx"'},"export default function IgntSend(props: IgntSendProps) {\n  const [state, setState] = useState(initialState);\n  const client = useClient();\n  const sendMsgSend = client.CosmosBankV1Beta1.tx.sendMsgSend;\n  const sendMsgTransfer = client.IbcApplicationsTransferV1.tx.sendMsgTransfer;\n  // plus-diff-start\n+ const msgTransfer = client.IbcApplicationsTransferV1.tx.msgTransfer;\n+ const msgPayPacketFee = client.IbcApplicationsFeeV1.tx.msgPayPacketFee;\n  // plus-diff-end\n  const { address } = useAddressContext();\n  const { balances } = useAssets(100);\n")),(0,r.kt)("p",null,"Recall that the ",(0,r.kt)("inlineCode",{parentName:"p"},"PayPacketFee")," message allows defining different tokens and amounts for each fee type (",(0,r.kt)("inlineCode",{parentName:"p"},"RecvFee"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"AckFee"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"TimeoutFee"),"). We will use the same amount for all three fee types."),(0,r.kt)("p",null,"The amount used will be half the amount of the ",(0,r.kt)("inlineCode",{parentName:"p"},"relayerFee")," selected by the user. This is because one of ",(0,r.kt)("inlineCode",{parentName:"p"},"AckFee")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"TimeoutFee")," will necessarily be refunded to the user since a packet either timeouts or receives acknowledgement but not both."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/components/IgntSend.tsx"',title:'"src/components/IgntSend.tsx"'},'  const sendTx = async (): Promise<void> => {\n    const fee: Array<Amount> = state.tx.fees.map((x) => ({\n      denom: x.denom,\n      amount: x.amount == "" ? "0" : x.amount,\n    }));\n\n    const amount: Array<Amount> = state.tx.amounts.map((x) => ({\n      denom: x.denom,\n      amount: x.amount == "" ? "0" : x.amount,\n    }));\n\n    // plus-diff-start\n+   const relayerFee: Array<Amount> = state.tx.relayerFee.map((x) => {\n+     const intAmount = x.amount == "" ? 0 : parseInt(x.amount, 10);\n+     const newAmount = Math.floor(intAmount / 2);\n+     return {\n+       denom: x.denom,\n+       amount: newAmount.toString(),\n+     };\n+   });\n+\n    // plus-diff-end\n')),(0,r.kt)("p",null,"Now that the fee amount is defined, we can build the tx. Currently, the way that the react app works is it checks whether or not a channel has been provided. If it has, it will send a ",(0,r.kt)("inlineCode",{parentName:"p"},"MsgTransfer")," message (",(0,r.kt)("inlineCode",{parentName:"p"},"isIBC = true"),"). Otherwise, it will send a ",(0,r.kt)("inlineCode",{parentName:"p"},"MsgSend")," message (",(0,r.kt)("inlineCode",{parentName:"p"},"isIBC = false"),").\nWe will do something similar. We will check if ",(0,r.kt)("inlineCode",{parentName:"p"},"relayerFee")," has been provided, if it is provided, and if ",(0,r.kt)("inlineCode",{parentName:"p"},"isIBC = true"),", then we will build a ",(0,r.kt)("inlineCode",{parentName:"p"},"MultiMsgTx")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"PayPacketFee")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"MsgTransfer"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/components/IgntSend.tsx"',title:'"src/components/IgntSend.tsx"'},'    const memo = state.tx.memo;\n\n    const isIBC = state.tx.ch !== "";\n\n    // plus-diff-start\n+   const isFee = state.tx.relayerFee.length > 0;\n+\n    // plus-diff-end\n    let send;\n\n    let payload: any = {\n      amount,\n      toAddress: state.tx.receiver,\n      fromAddress: address,\n    };\n    setState((oldState) => ({ ...oldState, currentUIState: UI_STATE.TX_SIGNING }));\n    try {\n      if (isIBC) {\n        payload = {\n          ...payload,\n          sourcePort: "transfer",\n          sourceChannel: state.tx.ch,\n          sender: address,\n          receiver: state.tx.receiver,\n          timeoutHeight: 0,\n          timeoutTimestamp: Long.fromNumber(new Date().getTime() + 60000).multiply(1000000),\n          token: state.tx.amounts[0],\n        };\n\n        // minus-diff-start\n-       send = () =>\n-         sendMsgTransfer({\n-           value: payload,\n-           fee: { amount: fee as Readonly<Amount>[], gas: "200000" },\n-           memo,\n-         });\n        // minus-diff-end\n        // plus-diff-start\n+       if (isFee) {\n+         const payFeeMsg = msgPayPacketFee({\n+           value: {\n+             signer: address,\n+             sourcePortId: "transfer",\n+             sourceChannelId: state.tx.ch,\n+             relayers: [],\n+             fee: {\n+               recvFee: relayerFee,\n+               ackFee: relayerFee,\n+               timeoutFee: relayerFee,\n+             },\n+           },\n+         });\n+\n+         const transferMsg = msgTransfer({\n+           value: payload,\n+         });\n+\n+         send = () =>\n+           client.signAndBroadcast(\n+             [payFeeMsg, transferMsg],\n+             { amount: fee as Readonly<Amount>[], gas: "200000" },\n+             memo,\n+           );\n+       } else {\n+         send = () =>\n+           sendMsgTransfer({\n+             value: payload,\n+             fee: { amount: fee as Readonly<Amount>[], gas: "200000" },\n+             memo,\n+           });\n+       }\n        // plus-diff-end\n      } else {\n')),(0,r.kt)("p",null,"See the diff up to this point ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/srdtrk/cosmoverse2023-ibc-fee-demo/commit/0b3ddc8f8fe547624ec0d38f08e2344d29d22ee7"},"here"),". We will test the UI in the next section."))}m.isMDXComponent=!0},55690:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/ignite-react-fee-f3c90910f957327b352e3ceb5507076a.png"}}]);