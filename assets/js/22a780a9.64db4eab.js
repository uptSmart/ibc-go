"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2086],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>h});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=a.createContext({}),p=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=p(e.components);return a.createElement(c.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(t),u=o,h=d["".concat(c,".").concat(u)]||d[u]||m[u]||r;return t?a.createElement(h,i(i({ref:n},l),{},{components:t})):a.createElement(h,i({ref:n},l))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=u;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<r;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},96639:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=t(87462),o=(t(67294),t(3905));const r={title:"Transaction Encoding",sidebar_label:"Transaction Encoding",sidebar_position:7,slug:"/apps/interchain-accounts/tx-encoding"},i="Transaction Encoding",s={unversionedId:"apps/interchain-accounts/tx-encoding",id:"apps/interchain-accounts/tx-encoding",title:"Transaction Encoding",description:"When orchestrating an interchain account transaction, which comprises multiple sdk.Msg objects represented as Any types, the transactions must be encoded as bytes within InterchainAccountPacketData.",source:"@site/docs/02-apps/02-interchain-accounts/07-tx-encoding.md",sourceDirName:"02-apps/02-interchain-accounts",slug:"/apps/interchain-accounts/tx-encoding",permalink:"/main/apps/interchain-accounts/tx-encoding",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{title:"Transaction Encoding",sidebar_label:"Transaction Encoding",sidebar_position:7,slug:"/apps/interchain-accounts/tx-encoding"},sidebar:"defaultSidebar",previous:{title:"Parameters",permalink:"/main/apps/interchain-accounts/parameters"},next:{title:"Client",permalink:"/main/apps/interchain-accounts/client"}},c={},p=[{value:"Protobuf Encoding",id:"protobuf-encoding",level:2},{value:"(Protobuf) JSON Encoding",id:"protobuf-json-encoding",level:2}],l={toc:p},d="wrapper";function m(e){let{components:n,...t}=e;return(0,o.kt)(d,(0,a.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"transaction-encoding"},"Transaction Encoding"),(0,o.kt)("p",null,"When orchestrating an interchain account transaction, which comprises multiple ",(0,o.kt)("inlineCode",{parentName:"p"},"sdk.Msg")," objects represented as ",(0,o.kt)("inlineCode",{parentName:"p"},"Any")," types, the transactions must be encoded as bytes within ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cosmos/ibc-go/blob/v7.2.0/proto/ibc/applications/interchain_accounts/v1/packet.proto#L21-L26"},(0,o.kt)("inlineCode",{parentName:"a"},"InterchainAccountPacketData")),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-protobuf"},"// InterchainAccountPacketData is comprised of a raw transaction, type of transaction and optional memo field.\nmessage InterchainAccountPacketData {\n  Type   type = 1;\n  bytes  data = 2;\n  string memo = 3;\n}\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," field must be encoded as a ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cosmos/ibc-go/blob/v7.2.0/proto/ibc/applications/interchain_accounts/v1/packet.proto#L28-L31"},(0,o.kt)("inlineCode",{parentName:"a"},"CosmosTx")),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-protobuf"},"// CosmosTx contains a list of sdk.Msg's. It should be used when sending transactions to an SDK host chain.\nmessage CosmosTx {\n  repeated google.protobuf.Any messages = 1;\n}\n")),(0,o.kt)("p",null,"The encoding method for ",(0,o.kt)("inlineCode",{parentName:"p"},"CosmosTx")," is determined during the channel handshake process. If the channel version ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cosmos/ibc-go/blob/v7.2.0/proto/ibc/applications/interchain_accounts/v1/metadata.proto#L22"},"metadata's ",(0,o.kt)("inlineCode",{parentName:"a"},"encoding")," field")," is marked as ",(0,o.kt)("inlineCode",{parentName:"p"},"proto3"),", then ",(0,o.kt)("inlineCode",{parentName:"p"},"CosmosTx")," undergoes protobuf encoding. Conversely, if the field is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"proto3json"),", then ",(0,o.kt)("a",{parentName:"p",href:"https://protobuf.dev/programming-guides/proto3/#json"},"proto3 json")," encoding takes place, which generates a JSON representation of the protobuf message."),(0,o.kt)("h2",{id:"protobuf-encoding"},"Protobuf Encoding"),(0,o.kt)("p",null,"Protobuf encoding serves as the standard encoding process for ",(0,o.kt)("inlineCode",{parentName:"p"},"CosmosTx"),". This occurs if the channel handshake initiates with an empty channel version metadata or if the ",(0,o.kt)("inlineCode",{parentName:"p"},"encoding")," field explicitly denotes ",(0,o.kt)("inlineCode",{parentName:"p"},"proto3"),". In Golang, the protobuf encoding procedure utilizes the ",(0,o.kt)("inlineCode",{parentName:"p"},"proto.Marshal")," function. Every protobuf autogenerated Golang type comes equipped with a ",(0,o.kt)("inlineCode",{parentName:"p"},"Marshal")," method that can be employed to encode the message."),(0,o.kt)("h2",{id:"protobuf-json-encoding"},"(Protobuf) JSON Encoding"),(0,o.kt)("p",null,"The proto3 JSON encoding presents an alternative encoding technique for ",(0,o.kt)("inlineCode",{parentName:"p"},"CosmosTx"),". It is selected if the channel handshake begins with the channel version metadata ",(0,o.kt)("inlineCode",{parentName:"p"},"encoding")," field labeled as ",(0,o.kt)("inlineCode",{parentName:"p"},"proto3json"),". In Golang, the Proto3 canonical encoding in JSON is implemented by the ",(0,o.kt)("inlineCode",{parentName:"p"},'"github.com/cosmos/gogoproto/jsonpb"')," package. Within Cosmos SDK, the ",(0,o.kt)("inlineCode",{parentName:"p"},"ProtoCodec")," structure implements the ",(0,o.kt)("inlineCode",{parentName:"p"},"JSONCodec")," interface, leveraging the ",(0,o.kt)("inlineCode",{parentName:"p"},"jsonpb")," package. This method generates a JSON format as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "messages": [\n    {\n      "@type": "/cosmos.bank.v1beta1.MsgSend",\n      "from_address": "cosmos1...",\n      "to_address": "cosmos1...",\n      "amount": [\n        {\n          "denom": "uatom",\n          "amount": "1000000"\n        }\n      ]\n    }\n  ]\n}\n')),(0,o.kt)("p",null,"Here, the ",(0,o.kt)("inlineCode",{parentName:"p"},'"messages"')," array is populated with transactions. Each transaction is represented as a JSON object with the ",(0,o.kt)("inlineCode",{parentName:"p"},"@type")," field denoting the transaction type and the remaining fields representing the transaction's attributes."))}m.isMDXComponent=!0}}]);